//为了项目日志系统需要，allen修改了glog日志源码。增加以下功能，请知悉！

1 增加按天打印日志功能，增加日志后缀功能；

2 增加定时删除n天前日志功能；其中LogDelTest工程文件夹为日志定时删除测试工程；

  修改代码体现在：
 
  void LogFileObject::Write(bool force_flush,
                          time_t timestamp,
                          const char* message,
                          int message_len) {
  MutexLock l(&lock_);

  // We don't log if the base_name_ is "" (which means "don't write")
  if (base_filename_selected_ && base_filename_.empty()) {
    return;
  }

  if (static_cast<int>(file_length_ >> 20) >= MaxLogSize() ||
      PidHasChanged()|| DayHasChanged() )  {
    if (file_ != NULL) fclose(file_);
    file_ = NULL;
    file_length_ = bytes_since_flush_ = 0;
    rollover_attempt_ = kRolloverAttemptFrequency-1;
	//加上日志删除函数调用  allenhfchen
	CLogDelOperate logDelOperate;
	char szAppPath[MAX_PATH+1] = {0}; 

	GetModuleFileName(NULL, szAppPath, MAX_PATH);

	string  sInstancePath(szAppPath);
	int pos = sInstancePath.rfind('\\');
	if( pos >= 0 ) 
	{
		sInstancePath = sInstancePath.substr(0,pos + 1);
	}
	sInstancePath += "\Log";

	logDelOperate.DeleteBackupLogFile(sInstancePath,_LOG_KEEP_DAYS_);   //C:/Users/Administrator/Desktop/LogDelTest/Debug/log
  }

// create by cooper     

GLOG_DEFINE_int32(log_keep_day, 0,
 "when more than the log_keep_day log files will be deleted"
 "0 mean does not delete");

在外层只需要初始化FLAG_log_keep_day变量就可以设置日志保留天数了

//加上日志删除函数调用  allenhfchen
 if(FLAGS_log_keep_day > 0)
 {
  CLogDelOperate logDelOperate;
  char szAppPath[MAX_PATH+1] = {0};
  GetModuleFileNameA(NULL, szAppPath, MAX_PATH);
  string  sInstancePath(szAppPath);
  int pos = sInstancePath.rfind('\\');
  if( pos >= 0 )
  {
   sInstancePath = sInstancePath.substr(0,pos + 1);
  }
  sInstancePath += "\\Log";
  printf("sInstancePath:%s\n",sInstancePath.c_str());
  OutputDebugStringA(sInstancePath.c_str());
  logDelOperate.DeleteBackupLogFile(sInstancePath,FLAGS_log_keep_day);   //C:/Users/Administrator/Desktop/LogDelTest/Debug/log
 }
 
 3 将日志打印设置成按天打印。
 修改地方
 if (static_cast<int>(file_length_ >> 20) >= MaxLogSize() ||
      /*PidHasChanged()||*/ DayHasChanged() )  {  //定制化为每天生成一个日志文件
    if (file_ != NULL) fclose(file_);
    file_ = NULL;
    file_length_ = bytes_since_flush_ = 0;
    rollover_attempt_ = kRolloverAttemptFrequency-1;
	
	time_pid_stream << 1900+tm_time.tm_year
                    << setw(2) << 1+tm_time.tm_mon
                    << setw(2) << tm_time.tm_mday;
                  /*  << '-'
                    << setw(2) << tm_time.tm_hour
                    << setw(2) << tm_time.tm_min
                    << setw(2) << tm_time.tm_sec
                    << '.'
                    << GetMainThreadPid();*/
 
 bool LogFileObject::CreateLogfile(const string& time_pid_string) {
  string string_filename = base_filename_+
                           time_pid_string+filename_extension_;  //mod by allen 2015-9-16 加上log后缀
  const char* filename = string_filename.c_str();
  //int fd = open(filename, O_WRONLY | O_CREAT /* | O_EXCL*/, 0664); //mod by allen 确保按天打印日志
  int fd = open(filename, O_WRONLY | O_CREAT | O_APPEND, 0664); 
  if (fd == -1) return false;
  
 4  日志保留最近三天的，单个日志文件最大30M .超过最大容量的时候清空从头覆写
 
 int fd = open(filename, O_WRONLY | O_CREAT | O_TRUNC | O_APPEND, 0664); 
 
 FLAGS_logbufsecs = 0;  //日志实时输出       
		FLAGS_max_log_size = 30; //最大日志文件大小30M
		FLAGS_colorlogtostderr = true;
		FLAGS_stop_logging_if_full_disk = true;
		FLAGS_log_keep_day = 3;          //只保留最近3天的日志
		m_bInit = true;
		
5   //是否对日志进行覆写分以下情况：
  fseek(file_,0L,SEEK_END);
  if ( ftell(file_) >= MaxLogSize()*1024*1024 )   //如果当前日志文件大小已经超过最大大小，则重头覆写
  {  
	  fseek(file_, 0L, SEEK_SET);
  }else{   //否则则在文件尾追加日志文件
	  fseek(file_, 0L, SEEK_END);
  }

6
    glog需要修改的地方,容易造成dump：
	1 const size_t LogMessage::kMaxLogMessageLen = 30000; 
	30000字节空间过大，在多线程中使用容易造成申请动态空间失败
	const size_t LogMessage::kMaxLogMessageLen = 10000;  //mod by allen 减小每次申请的动态内存大小
	
	2     data_->buf_ = new char[kMaxLogMessageLen+1];
	logging.cc 1205在对动态内存空间申请的时候没有进行判断。
	
7
	/*time_t raw_time;
	struct tm* tm_info;

	time(&raw_time);
	tm_info = localtime(&raw_time);

	if (tm_info->tm_mday != g_main_day)     //tm_info指针没有加上非空判断
	{
	g_main_day = tm_info->tm_mday;
	return true;
	}

	return false;*/
	
	修改成如下，上述代码在特定环境下会造成dump，
	原因可能有以下几点：1
	1 没有对tm_info指针进行非空判断；
	2 localtime函数不是线程安全的，可以考虑换成localtime_s函数；
	3 tm_info指针获取到值之后需立即进行拷贝，localtime是直接返回strcut tm*指针（如果成功的话）；这个指针是指向一个静态变量的；因此，返回的指针所指向的静态变量有可能被其他地方调用的localtime改掉，例如多线程使用的时候。

	SYSTEMTIME LocalTime;  //mod by allen for avoid dump 改成使用windowsApI函数
	::GetLocalTime(&LocalTime);
	struct tm tm_info = {0};

	tm_info.tm_mday = LocalTime.wDay;

	if (tm_info.tm_mday != g_main_day)
	{
		g_main_day = tm_info.tm_mday;
		return true;
	}
	return false;

	8新增定时删除VoiceFile目录中zip及mp3后缀文件功能。